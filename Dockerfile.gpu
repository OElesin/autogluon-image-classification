FROM nvidia/cuda:10.1-base-ubuntu16.04

# first layers should be dependency install so changes in code won't cause the build to
# start from scratch.
ARG PYTHON=python3
ARG PIP=pip3
ARG PYTHON_VERSION=3.6.8
ARG MX_URL=https://aws-mxnet-pypi.s3-us-west-2.amazonaws.com/1.6.0/aws_mxnet_cu101mkl-1.6.0-py2.py3-none-manylinux1_x86_64.whl


COPY requirements.txt /opt/program/requirements.txt

ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PYTHONIOENCODING=UTF-8 \
    LANG=C.UTF-8 \
    LC_ALL=C.UTF-8 \
    PATH="/opt/program:${PATH}" \
    MODEL_PATH="/opt/ml/model" \
    LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/lib" \
    DGLBACKEND=mxnet \
    CUDNN_VERSION=7.6.0.64-1+cuda10.1 \
    NCCL_VERSION=2.4.8-1+cuda10.1

RUN apt-get update \
 && apt-get install -y --no-install-recommends \
    nginx \
    software-properties-common \
    build-essential \
    ca-certificates \
    libcudnn7=${CUDNN_VERSION} \
    cuda-command-line-tools-10-1 \
    cuda-cufft-10-1 \
    cuda-curand-10-1 \
    cuda-cusolver-10-1 \
    cuda-cusparse-10-1 \
    curl \
    git \
    libatlas-base-dev \
    libcurl4-openssl-dev \
    libnccl2=${NCCL_VERSION} \
    libgomp1 \
    libnccl-dev=${NCCL_VERSION} \
    libopencv-dev \
    openssh-client \
    openssh-server \
    vim \
    python3-dev \
    wget \
    zlib1g-dev \
    gcc \
 && apt-get clean \
 && rm -rf /var/lib/apt/lists/*


# Install cuda-dev libraries as a dependency for Horovod with MXNet backend
ENV CUDA_LIB_URL=https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64
RUN wget ${CUDA_LIB_URL}/libcublas10_10.2.1.243-1_amd64.deb \
    ${CUDA_LIB_URL}/libcublas-dev_10.2.1.243-1_amd64.deb \
    ${CUDA_LIB_URL}/cuda-curand-dev-10-1_10.1.243-1_amd64.deb \
    ${CUDA_LIB_URL}/cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \
    ${CUDA_LIB_URL}/cuda-nvrtc-10-1_10.1.243-1_amd64.deb \
    ${CUDA_LIB_URL}/cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb \
 && dpkg -i libcublas10_10.2.1.243-1_amd64.deb \
    libcublas-dev_10.2.1.243-1_amd64.deb \
    cuda-curand-dev-10-1_10.1.243-1_amd64.deb \
    cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \
    cuda-nvrtc-10-1_10.1.243-1_amd64.deb \
    cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb \
 && apt-get install -f \
 && rm libcublas10_10.2.1.243-1_amd64.deb \
    libcublas-dev_10.2.1.243-1_amd64.deb \
    cuda-curand-dev-10-1_10.1.243-1_amd64.deb \
    cuda-cusolver-dev-10-1_10.1.243-1_amd64.deb \
    cuda-nvrtc-10-1_10.1.243-1_amd64.deb \
    cuda-nvrtc-dev-10-1_10.1.243-1_amd64.deb

# Install Open MPI
RUN mkdir /tmp/openmpi \
     && cd /tmp/openmpi \
     && curl -fSsL -O https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.1.tar.gz \
     && tar zxf openmpi-4.0.1.tar.gz \
     && cd openmpi-4.0.1 \
     && ./configure --enable-orterun-prefix-by-default \
     && make -j $(nproc) all \
     && make install \
     && ldconfig \
     && rm -rf /tmp/openmpi


# Create a wrapper for OpenMPI to allow running as root by default
RUN mv /usr/local/bin/mpirun /usr/local/bin/mpirun.real \
 && echo '#!/bin/bash' > /usr/local/bin/mpirun \
 && echo 'mpirun.real --allow-run-as-root "$@"' >> /usr/local/bin/mpirun \
 && chmod a+x /usr/local/bin/mpirun

# Configure OpenMPI to run good defaults:
#   --bind-to none --map-by slot --mca btl_tcp_if_exclude lo,docker0
RUN echo "hwloc_base_binding_policy = none" >> /usr/local/etc/openmpi-mca-params.conf \
 && echo "rmaps_base_mapping_policy = slot" >> /usr/local/etc/openmpi-mca-params.conf

# Set default NCCL parameters
RUN echo NCCL_DEBUG=INFO >> /etc/nccl.conf

ENV LD_LIBRARY_PATH=/usr/local/openmpi/lib:$LD_LIBRARY_PATH
ENV PATH=/usr/local/openmpi/bin/:$PATH
ENV PATH=/usr/local/nvidia/bin:$PATH


RUN wget https://www.python.org/ftp/python/$PYTHON_VERSION/Python-$PYTHON_VERSION.tgz \
    && tar -xvf Python-$PYTHON_VERSION.tgz \
    && cd Python-$PYTHON_VERSION \
    && ./configure \
    && make \
    && make install \
    && apt-get update \
    && apt-get install -y --no-install-recommends \
    libreadline-gplv2-dev \
    libncursesw5-dev \
    libssl-dev \
    libsqlite3-dev \
    libgdbm-dev \
    libc6-dev \
    libbz2-dev \
    tk-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* \
    && make \
    && make install \
    && rm -rf ../Python-$PYTHON_VERSION* \
    && ln -s /usr/local/bin/pip3 /usr/bin/pip \
    && ln -s $(which ${PYTHON}) /usr/local/bin/python


# MXNet requires pip 19.3.1 due to being backwards compatible
# with python2
RUN ${PIP} --no-cache-dir install --upgrade \
    pip==19.3.1 \
    setuptools


RUN pip install --upgrade pip \
    && pip install --no-cache-dir -r /opt/program/requirements.txt

RUN pip install --upgrade ${MX_URL} awscli \
    && pip install autogluon

# Set some environment variables. PYTHONUNBUFFERED keeps Python from buffering our standard
# output stream, which means that logs can be delivered to the user quickly. PYTHONDONTWRITEBYTECODE
# keeps Python from writing the .pyc files which are unnecessary in this case. We also update
# PATH so that the train and serve programs are found when the container is invoked.


# Set up the program in the image
COPY model /opt/program
WORKDIR /opt/program
#ENV SAGEMAKER_PROGRAM train
#ENV SAGEMAKER_PROGRAM serve

