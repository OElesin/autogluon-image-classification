#!/usr/bin/env python

# Some boilerplate code. Sagemaker expects to have a model definition in /opt/ml/model
# We copy the model to that location, however we don't use it in inference
import sys
import traceback
import shutil
from argparse import ArgumentParser
import os
import json
import mxnet
import autogluon as ag
from autogluon import ImageClassification as task, Categorical
from mxnet import optimizer as optim


prefix = '/opt/ml/'


input_path = prefix + 'input/data'
output_path = os.path.join(prefix, 'output')
param_path = os.path.join(prefix, 'input/config/hyperparameters.json')  # make it a dict with kwargs

# AutoGluon Tabular Task Tuning Parameters
# Read more: https://autogluon.mxnet.io/tutorials/image_classification/hpo.html
search_strategy = 'skopt'
search_options = {'base_estimator': 'RF', 'acq_func': 'EI'}
time_limits = 5 * 60  # train various models for ~2 min


def train(parameters=None):
    try:
        # load training data
        train_dataset = task.Dataset(train_files)
        classifier = task.fit(
            train_dataset,
            # net=ag.space.Categorical['resnet18_v1', 'resnet34_v1']('ResNet50_v1b', 'ResNet18_v1b', 'MobileNet0.25'),
            search_strategy=search_strategy,
            search_options=search_options,
            time_limits=time_limits,
            epochs=epochs,
            ngpus_per_trial=ngpus_per_trial,
            output_directory=model_dir
        )
        print('Training complete!!')
        print('Evaluate Autogluon Image Classifier')
        test_dataset = task.Dataset(test_files, train=False)
        test_acc = classifier.evaluate(test_dataset)
        print('Top-1 test acc: %.3f' % test_acc)
        print('Evaluation completed')
    except Exception as e:
        # Write out an error file. This will be returned as the failureReason in the
        # DescribeTrainingJob result.
        trc = traceback.format_exc()
        with open(os.path.join(output_path, 'failure'), 'w') as s:
            s.write('Exception during training: ' + str(e) + '\n' + trc)
        # Printing this causes the exception to be in the training job logs, as well.
        print('Exception during training: ' + str(e) + '\n' + trc)
        # A non-zero exit code causes the training job to be marked as Failed.
        sys.exit(255)


if __name__ == '__main__':
    parser = ArgumentParser()
    parser.add_argument('--train', type=str, default='/opt/ml/input/data/training')
    parser.add_argument('--test', type=str, default='/opt/ml/input/data/testing')
    parser.add_argument('--epochs', type=int, default=5)
    parser.add_argument('--ngpus-per-trial', type=int, default=10)
    parser.add_argument('--model_dir', type=str, default='/opt/ml/model')
    parameters = json.load(open(param_path))
    epochs = parameters.get('epochs', 5)
    ngpus_per_trial = int(parameters.get('ngpus-per-trial', 10))
    args, _ = parser.parse_known_args()
    train_files = args.train
    test_files = args.test
    model_dir = args.model_dir
    print(f"Images Classes: {os.listdir(train_files)}")
    train()
    # A zero exit code causes the job to be marked a Succeeded.
    sys.exit(0)
